/* Generated By:JavaCC: Do not edit this line. InputParserTokenManager.java */
package parser.generated;
import parser.ast.*;
import java.util.ArrayList;
import java.util.Stack;

/** Token Manager. */
public class InputParserTokenManager implements InputParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100000000L) != 0L)
            return 39;
         if ((active0 & 0xfff04600L) != 0L)
            return 47;
         if ((active0 & 0x28000L) != 0L)
            return 36;
         if ((active0 & 0x50000L) != 0L)
            return 32;
         if ((active0 & 0x39e0L) != 0L)
         {
            jjmatchedKind = 54;
            return 47;
         }
         return -1;
      case 1:
         if ((active0 & 0x39e0L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 47;
         }
         if ((active0 & 0x20000L) != 0L)
            return 47;
         if ((active0 & 0x10000L) != 0L)
            return 31;
         if ((active0 & 0x100000000L) != 0L)
            return 48;
         return -1;
      case 2:
         if ((active0 & 0x10020L) != 0L)
            return 47;
         if ((active0 & 0x39c0L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 47;
         }
         return -1;
      case 3:
         if ((active0 & 0x800L) != 0L)
            return 47;
         if ((active0 & 0x31c0L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 47;
         }
         return -1;
      case 4:
         if ((active0 & 0x31c0L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
            return 47;
         }
         return -1;
      case 5:
         if ((active0 & 0x40L) != 0L)
            return 47;
         if ((active0 & 0x3180L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
            return 47;
         }
         return -1;
      case 6:
         if ((active0 & 0x100L) != 0L)
            return 47;
         if ((active0 & 0x3080L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
            return 47;
         }
         return -1;
      case 7:
         if ((active0 & 0x3080L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
            return 47;
         }
         return -1;
      case 8:
         if ((active0 & 0x80L) != 0L)
            return 47;
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 8;
            return 47;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000L) != 0L)
            return 47;
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
            return 47;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 20, 47);
      case 36:
         return jjStartNfaWithStates_0(0, 21, 47);
      case 37:
         return jjStartNfaWithStates_0(0, 22, 47);
      case 38:
         return jjStartNfaWithStates_0(0, 23, 47);
      case 42:
         return jjStartNfaWithStates_0(0, 9, 47);
      case 43:
         return jjStartNfaWithStates_0(0, 14, 47);
      case 45:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 46:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 47:
         return jjStartNfaWithStates_0(0, 24, 47);
      case 58:
         return jjStartNfaWithStates_0(0, 10, 47);
      case 60:
         return jjStartNfaWithStates_0(0, 25, 47);
      case 61:
         return jjStartNfaWithStates_0(0, 26, 47);
      case 62:
         return jjStartNfaWithStates_0(0, 27, 47);
      case 63:
         return jjStartNfaWithStates_0(0, 28, 47);
      case 64:
         return jjStopAtPos(0, 19);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 94:
         return jjStartNfaWithStates_0(0, 29, 47);
      case 95:
         return jjStartNfaWithStates_0(0, 30, 47);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 126:
         return jjStartNfaWithStates_0(0, 31, 47);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 47);
         break;
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 120:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 47);
         break;
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 47);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1080L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 103:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 47);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 47);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 7, 47);
         break;
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 47);
         break;
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 12, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x1e00L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec2 = {
   0x8000L, 0x0L, 0x4000000000L, 0x0L
};
static final long[] jjbitVec3 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x1000000L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec5 = {
   0x3ff0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x0L, 0x3ffL
};
static final long[] jjbitVec8 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec10 = {
   0x0L, 0x3ffL, 0x3ff0000L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x0L, 0x3ff00000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0xffc0L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x3ff03ffL, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ff0000L, 0x3ff000000000000L, 0x0L
};
static final long[] jjbitVec15 = {
   0x0L, 0x3ff03ffL, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec17 = {
   0x3ffL, 0x0L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec18 = {
   0x0L, 0x3ff0000L, 0x0L, 0x0L
};
static final long[] jjbitVec19 = {
   0x0L, 0x0L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec20 = {
   0xc800000000000008L, 0xde01L, 0xc00000000000000cL, 0x801981L
};
static final long[] jjbitVec21 = {
   0xc000000000000008L, 0x1L, 0xc000000000000008L, 0x1a01L
};
static final long[] jjbitVec22 = {
   0x400000000000000cL, 0x801981L, 0xc000000000000000L, 0x801dc6L
};
static final long[] jjbitVec23 = {
   0xeL, 0x1eL, 0x400000000000000cL, 0x600d9fL
};
static final long[] jjbitVec24 = {
   0xc00000000000000cL, 0x801dc1L, 0xcL, 0xc0000ff038000L
};
static final long[] jjbitVec25 = {
   0xc000000000000000L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0x1902180000000000L, 0x3f9c00c00000L, 0x1c009f98L, 0x0L
};
static final long[] jjbitVec27 = {
   0x0L, 0x0L, 0xc040000000000000L, 0x1bfL
};
static final long[] jjbitVec28 = {
   0x1fb0e7800000000L, 0x0L, 0xffff000000000000L, 0x301L
};
static final long[] jjbitVec29 = {
   0xe000000L, 0x7e01a00a00000L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0xe820000000000010L, 0x1bL, 0x4c200000004L, 0xc5c8000000000L
};
static final long[] jjbitVec31 = {
   0x300ff000000000L, 0x0L, 0x0L, 0x4000200000000L
};
static final long[] jjbitVec32 = {
   0x9800000000L, 0x0L, 0xfff0000000000003L, 0xfL
};
static final long[] jjbitVec33 = {
   0x0L, 0xc0000L, 0xec30000000000008L, 0x1L
};
static final long[] jjbitVec34 = {
   0x19800000000000L, 0x800000000002000L, 0x0L, 0x0L
};
static final long[] jjbitVec35 = {
   0x0L, 0x0L, 0x0L, 0x16d800000000L
};
static final long[] jjbitVec36 = {
   0x0L, 0x0L, 0x300L, 0x0L
};
static final long[] jjbitVec37 = {
   0x0L, 0x0L, 0x0L, 0x1de0000000L
};
static final long[] jjbitVec38 = {
   0x0L, 0x7000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x0L, 0x0L, 0x0L, 0x7f7fffffL
};
static final long[] jjbitVec40 = {
   0xaa55555555555555L, 0x2b555555555554aaL, 0x11aed2d5b1dbced6L, 0x55d255554aaaa490L
};
static final long[] jjbitVec41 = {
   0x6c05555555555555L, 0x557aL, 0x0L, 0x0L
};
static final long[] jjbitVec42 = {
   0x0L, 0x45000000000000L, 0xffbfffed740L, 0xe6905555551c8000L
};
static final long[] jjbitVec43 = {
   0xffffffffffffL, 0x5555555500000000L, 0x5555555555555401L, 0x5555555555552aabL
};
static final long[] jjbitVec44 = {
   0xfffe005555555555L, 0x7fffffL, 0x0L, 0x0L
};
static final long[] jjbitVec45 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x3fL
};
static final long[] jjbitVec46 = {
   0x5555555555555555L, 0x5555555555555555L, 0x5555555540155555L, 0x5555555555555555L
};
static final long[] jjbitVec47 = {
   0xff00ff003f00ff00L, 0xff00aa003f00L, 0xf00000000000000L, 0xf001f000f000f00L
};
static final long[] jjbitVec48 = {
   0xc00f3d503e273884L, 0x20L, 0x8L, 0x0L
};
static final long[] jjbitVec49 = {
   0x7fffffffffffL, 0xc025ea9d00000000L, 0x5555555555555555L, 0x280555555555L
};
static final long[] jjbitVec50 = {
   0x0L, 0x155555555555L, 0x555555L, 0x0L
};
static final long[] jjbitVec51 = {
   0x5554555400000000L, 0x6a00555555555555L, 0x15500012855L, 0x0L
};
static final long[] jjbitVec52 = {
   0x7fffffe00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec53 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffff80000000L
};
static final long[] jjbitVec54 = {
   0x55aaaaaaaaaaaaaaL, 0xd4aaaaaaaaaaab55L, 0xe6512d2a4e243129L, 0xaa29aaaab5555240L
};
static final long[] jjbitVec55 = {
   0x93faaaaaaaaaaaaaL, 0xffffffffffffaa85L, 0xffffffefffffL, 0x0L
};
static final long[] jjbitVec56 = {
   0x0L, 0x388a000000000000L, 0xfffff00000010000L, 0x192faaaaaae37fffL
};
static final long[] jjbitVec57 = {
   0xffff000000000000L, 0xaaaaaaaaffffffffL, 0xaaaaaaaaaaaaa802L, 0xaaaaaaaaaaaad554L
};
static final long[] jjbitVec58 = {
   0xaaaaaaaaaaL, 0xfffffffe00000000L, 0xffL, 0x0L
};
static final long[] jjbitVec59 = {
   0xfffffffffffL, 0xfefffffc00000000L, 0x7ffffffL, 0x0L
};
static final long[] jjbitVec60 = {
   0xaaaaaaaaaaaaaaaaL, 0xaaaaaaaaaaaaaaaaL, 0xaaaaaaaabfeaaaaaL, 0xaaaaaaaaaaaaaaaaL
};
static final long[] jjbitVec61 = {
   0xff00ff003f00ffL, 0x3fff00ff00ff003fL, 0x40df00ff00ff00ffL, 0xdc00ff00cf00dcL
};
static final long[] jjbitVec62 = {
   0x321080000008c400L, 0x43c0L, 0x10L, 0x0L
};
static final long[] jjbitVec63 = {
   0xffff000000000000L, 0x1fda15627fffffffL, 0xaaaaaaaaaaaaaaaaL, 0x501aaaaaaaaaL
};
static final long[] jjbitVec64 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec65 = {
   0x0L, 0x2aaaaaaaaaaaL, 0xaaaaaaL, 0x0L
};
static final long[] jjbitVec66 = {
   0xaaabaaa800000000L, 0x95feaaaaaaaaaaaaL, 0x2aa000250aaL, 0x400000000000000L
};
static final long[] jjbitVec67 = {
   0xf8007fL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec68 = {
   0x0L, 0x3fffffeL, 0x0L, 0x0L
};
static final long[] jjbitVec69 = {
   0x0L, 0x0L, 0x0L, 0x4000000000920L
};
static final long[] jjbitVec70 = {
   0x0L, 0x0L, 0x1000ff00ff00ff00L, 0x1000000000001000L
};
static final long[] jjbitVec71 = {
   0x0L, 0x0L, 0xffff000000000000L, 0x501f0003ffc3L
};
static final long[] jjbitVec72 = {
   0x0L, 0x410000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec73 = {
   0x0L, 0x2000000L, 0x0L, 0x0L
};
static final long[] jjbitVec74 = {
   0x0L, 0x1L, 0x0L, 0x6000000000L
};
static final long[] jjbitVec75 = {
   0x0L, 0x0L, 0x0L, 0x430000000000000L
};
static final long[] jjbitVec76 = {
   0x11004000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec77 = {
   0x0L, 0x2000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec78 = {
   0x0L, 0x40L, 0x0L, 0x40L
};
static final long[] jjbitVec79 = {
   0x0L, 0x0L, 0x0L, 0x1000000000000000L
};
static final long[] jjbitVec80 = {
   0x0L, 0x0L, 0x0L, 0x800000L
};
static final long[] jjbitVec81 = {
   0x0L, 0x8L, 0x0L, 0x0L
};
static final long[] jjbitVec82 = {
   0x0L, 0x0L, 0x8000000000L, 0x0L
};
static final long[] jjbitVec83 = {
   0x0L, 0x3f00000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec84 = {
   0xfffff00000000000L, 0x1000003ffffffffL, 0xfffffffff8000000L, 0x0L
};
static final long[] jjbitVec85 = {
   0x0L, 0x8002000000000000L, 0x1fff0000L, 0x0L
};
static final long[] jjbitVec86 = {
   0x0L, 0x2000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec87 = {
   0x0L, 0x800000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec88 = {
   0x800000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec89 = {
   0x83e000000000020L, 0x0L, 0x60000000L, 0x7000000000000000L
};
static final long[] jjbitVec90 = {
   0x200000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec91 = {
   0x0L, 0x0L, 0x0L, 0x3f00000000000000L
};
static final long[] jjbitVec92 = {
   0x1000L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec93 = {
   0xff800000L, 0x1000000000000L, 0x100L, 0x0L
};
static final long[] jjbitVec94 = {
   0x0L, 0x0L, 0x0L, 0x8000L
};
static final long[] jjbitVec95 = {
   0x0L, 0x1000000000000L, 0x0L, 0x20000000L
};
static final long[] jjbitVec96 = {
   0x0L, 0x1000000000000L, 0xc0000000L, 0x0L
};
static final long[] jjbitVec97 = {
   0x220000L, 0x0L, 0x2e00000000L, 0x1200000000000000L
};
static final long[] jjbitVec99 = {
   0x10000000000000L, 0x4000L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec100 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec101 = {
   0x0L, 0x0L, 0x800000000000000L, 0xfL
};
static final long[] jjbitVec102 = {
   0x0L, 0x0L, 0x100000L, 0x0L
};
static final long[] jjbitVec103 = {
   0x0L, 0x0L, 0x0L, 0x707ffffff0000L
};
static final long[] jjbitVec104 = {
   0xffffffff00000000L, 0xfffec000000007feL, 0xffffffffffffffffL, 0x9c00c000002fffffL
};
static final long[] jjbitVec105 = {
   0xfffffffd0000L, 0xffffffffffffe000L, 0x2003fffffffffL, 0x7fffffffc00L
};
static final long[] jjbitVec106 = {
   0x3fffffL, 0x1ffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec107 = {
   0x23fffffffffffff0L, 0xfefc0003ff010000L, 0x23c5fdfffff99fe0L, 0x30003b0004000L
};
static final long[] jjbitVec108 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbbfe0L, 0x300010000L
};
static final long[] jjbitVec109 = {
   0x23edfdfffff99fe0L, 0x20003b0000000L, 0x3ffc718d63dc7e8L, 0x10000L
};
static final long[] jjbitVec110 = {
   0x23effdfffffddfe0L, 0x303000000L, 0x23effdfffffddfe0L, 0x6000340000000L
};
static final long[] jjbitVec111 = {
   0x27fffffffffddfe0L, 0xfc00000300004000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec112 = {
   0xdfffffffffffeL, 0x3fL, 0x200decaefef02596L, 0x3000001fL
};
static final long[] jjbitVec113 = {
   0x1L, 0x1ffffffffeffL, 0x1f00L, 0x0L
};
static final long[] jjbitVec114 = {
   0x800007ffffffffffL, 0xffe1c0623c3f0000L, 0x4003L, 0x7ffffffffff0000L
};
static final long[] jjbitVec115 = {
   0xffffffffffffffffL, 0xffffffff3d7f3dffL, 0x7f3dffffffff3dffL, 0xffffffffff7fff3dL
};
static final long[] jjbitVec116 = {
   0xffffffffff3dffffL, 0x7ffffffL, 0xffffffff0000ffffL, 0x1fffffffffffffL
};
static final long[] jjbitVec117 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec118 = {
   0xffffffffffffffffL, 0xffff9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec119 = {
   0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x10000000L
};
static final long[] jjbitVec120 = {
   0xffffffff00000000L, 0xfffffffffffff7L, 0xffff05ffffffffffL, 0x3fffffffffffffL
};
static final long[] jjbitVec121 = {
   0x1fffffffL, 0x1f3fffffff0000L, 0xfffffffffffL, 0xfeL
};
static final long[] jjbitVec122 = {
   0xffffffff007fffffL, 0x1fffffL, 0x0L, 0x0L
};
static final long[] jjbitVec123 = {
   0xfffffffffffe0L, 0xfe0L, 0xc001fffffff8L, 0x3fffffffffL
};
static final long[] jjbitVec124 = {
   0xfffffffffL, 0xfffffffc00e000L, 0x0L, 0x3de0000000000L
};
static final long[] jjbitVec125 = {
   0x1e0000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec126 = {
   0xffff000000000000L, 0x3fffffffffL, 0x7f7f7f7f007fffffL, 0x7f7f7f7fL
};
static final long[] jjbitVec127 = {
   0x1000000000000040L, 0xfffffffffffffffeL, 0xfffffffe807fffffL, 0x87ffffffffffffffL
};
static final long[] jjbitVec128 = {
   0xfffe3fffffffffe0L, 0xffffffffffffffffL, 0x7ffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec129 = {
   0x0L, 0x0L, 0x20000000000000L, 0x0L
};
static final long[] jjbitVec130 = {
   0x0L, 0x0L, 0x0L, 0x800L
};
static final long[] jjbitVec131 = {
   0xffffffffffdfffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec132 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0xffffffffff0000L
};
static final long[] jjbitVec133 = {
   0xc00ffff0fffL, 0x400000000000L, 0xffffffff00000000L, 0x3fffffffffL
};
static final long[] jjbitVec134 = {
   0x0L, 0x0L, 0x0L, 0xf800000000000000L
};
static final long[] jjbitVec135 = {
   0x7fffff7bbL, 0xfffffffffffffL, 0xffffffffffffcL, 0x8fc000000000000L
};
static final long[] jjbitVec136 = {
   0xffff003ffffffc00L, 0x1fffffff0000007fL, 0x7fffffffffff0L, 0x0L
};
static final long[] jjbitVec137 = {
   0x1ffffffffffL, 0x47effff00000ff7L, 0x3e62ffffffffffffL, 0x18000005L
};
static final long[] jjbitVec138 = {
   0x7f7f007e7e7eL, 0x0L, 0x0L, 0x7ffffffffL
};
static final long[] jjbitVec139 = {
   0x0L, 0x0L, 0xffff000800000000L, 0xffffffffffff87fL
};
static final long[] jjbitVec140 = {
   0xffff3fffffffffffL, 0xffff3fffffffffffL, 0xffffffffffffffffL, 0x3ffffffL
};
static final long[] jjbitVec141 = {
   0x5f7ffdffa0000000L, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec142 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec143 = {
   0x0L, 0xffdf000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec144 = {
   0x0L, 0xfffeffc000000000L, 0x7fffffff3fffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec145 = {
   0xffffffffffffffffL, 0xffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec146 = {
   0x0L, 0x0L, 0xf8L, 0x0L
};
static final long[] jjbitVec147 = {
   0x0L, 0x0L, 0xbffffffffffe0000L, 0xb6L
};
static final long[] jjbitVec148 = {
   0x7ff0000L, 0x10000fffff800L, 0x0L, 0x3d9f9fc00000L
};
static final long[] jjbitVec149 = {
   0xffff000000020000L, 0x7ffL, 0x1ffc000000000L, 0xff80000000000L
};
static final long[] jjbitVec150 = {
   0x3eeffbc00000L, 0xe000000L, 0x0L, 0x0L
};
static final long[] jjbitVec151 = {
   0x1400000000000007L, 0xc00fe21feL, 0x1000000000000002L, 0xc0000201eL
};
static final long[] jjbitVec152 = {
   0x1000000000000006L, 0x23000000023986L, 0x1000000000000006L, 0xc000021beL
};
static final long[] jjbitVec153 = {
   0x9000000000000002L, 0xc0040201eL, 0x4L, 0x2001L
};
static final long[] jjbitVec154 = {
   0xc000000000000000L, 0xc00603dc1L, 0x9000000000000000L, 0xc00003040L
};
static final long[] jjbitVec155 = {
   0x0L, 0xc0000201eL, 0x0L, 0x5c0400L
};
static final long[] jjbitVec156 = {
   0x7f2000000000000L, 0x7f80L, 0x1bf2000000000000L, 0x3f00L
};
static final long[] jjbitVec157 = {
   0x2a0000003000000L, 0x7ffe000000000000L, 0x1ffffffffeffe0dfL, 0x40L
};
static final long[] jjbitVec158 = {
   0x66fde00000000000L, 0x1e0001c3000000L, 0x20002064L, 0x0L
};
static final long[] jjbitVec159 = {
   0x0L, 0xe0000000L, 0x0L, 0x0L
};
static final long[] jjbitVec160 = {
   0x1c0000001c0000L, 0xc0000000c0000L, 0x3f80000000000000L, 0x200ffe40L
};
static final long[] jjbitVec161 = {
   0x3800L, 0x0L, 0x20000000000L, 0x0L
};
static final long[] jjbitVec162 = {
   0xe04018700000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec163 = {
   0x1800000L, 0x9ff81fe57f400000L, 0x0L, 0x0L
};
static final long[] jjbitVec164 = {
   0x17d000000000000fL, 0xff80000000004L, 0x33c00000003L, 0x3a34000000000L
};
static final long[] jjbitVec165 = {
   0xcff00000000000L, 0x0L, 0x0L, 0x21fdfff70000L
};
static final long[] jjbitVec166 = {
   0x0L, 0x0L, 0x0L, 0xf000007fffffffffL
};
static final long[] jjbitVec167 = {
   0x0L, 0x0L, 0x0L, 0x1ffe21fff0000L
};
static final long[] jjbitVec168 = {
   0x0L, 0x0L, 0x0L, 0x3800000000000L
};
static final long[] jjbitVec169 = {
   0x0L, 0x8000000000000000L, 0x0L, 0xffffffff00000000L
};
static final long[] jjbitVec170 = {
   0xfc0000000000L, 0x0L, 0x6000000L, 0x0L
};
static final long[] jjbitVec171 = {
   0x0L, 0x3000800000000000L, 0x0L, 0x3000000000000L
};
static final long[] jjbitVec172 = {
   0x6000000844L, 0x0L, 0x0L, 0x3ffff00000010L
};
static final long[] jjbitVec173 = {
   0x3fc000000000L, 0x3ff80L, 0x13c8000000000007L, 0x0L
};
static final long[] jjbitVec174 = {
   0x667e0000000000L, 0x1008L, 0xc19d000000000000L, 0x2L
};
static final long[] jjbitVec175 = {
   0x0L, 0x0L, 0x0L, 0x212000000000L
};
static final long[] jjbitVec176 = {
   0x40000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec177 = {
   0x7f0000ffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec178 = {
   0x0L, 0x0L, 0x0L, 0x1c00000000000L
};
static final long[] jjbitVec179 = {
   0x0L, 0xffffffff00000000L, 0x1e7L, 0x0L
};
static final long[] jjbitVec180 = {
   0x70003fe00000080L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec181 = {
   0x0L, 0x0L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec182 = {
   0x0L, 0x0L, 0x720c000000000000L, 0x0L
};
static final long[] jjbitVec183 = {
   0x0L, 0x0L, 0x0L, 0x3f0000000000000L
};
static final long[] jjbitVec184 = {
   0x0L, 0xfc000000000000L, 0x0L, 0x7000000000000L
};
static final long[] jjbitVec185 = {
   0x0L, 0x7f00000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec186 = {
   0x0L, 0x3f000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec187 = {
   0xffc0000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec188 = {
   0x0L, 0x1ffffe0000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec189 = {
   0x0L, 0x0L, 0x0L, 0x4000000L
};
static final long[] jjbitVec190 = {
   0x0L, 0x3f1000000000000L, 0x3ffL, 0x0L
};
static final long[] jjbitVec191 = {
   0x0L, 0xffff0000L, 0x200L, 0x0L
};
static final long[] jjbitVec192 = {
   0x0L, 0xffffffff00000000L, 0xfffffffL, 0xfffffc0000000000L
};
static final long[] jjbitVec193 = {
   0x0L, 0xffc0000000000000L, 0xfffffL, 0x0L
};
static final long[] jjbitVec194 = {
   0x0L, 0x0L, 0x0L, 0x2000000000000000L
};
static final long[] jjbitVec195 = {
   0x0L, 0x0L, 0x3c0000L, 0x0L
};
static final long[] jjbitVec196 = {
   0x3ff00000000L, 0xfffe0000L, 0xfffe0000000003ffL, 0x0L
};
static final long[] jjbitVec197 = {
   0x3f000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec198 = {
   0x0L, 0x0L, 0x4000000000000400L, 0x0L
};
static final long[] jjbitVec199 = {
   0x40L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec200 = {
   0x3f0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec201 = {
   0x4800000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec202 = {
   0x1000010000000L, 0x0L, 0x100000000L, 0x0L
};
static final long[] jjbitVec203 = {
   0x6000000000000L, 0x801000000L, 0x0L, 0x0L
};
static final long[] jjbitVec204 = {
   0x2000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec205 = {
   0x8000000000000000L, 0x100001L, 0x0L, 0x0L
};
static final long[] jjbitVec206 = {
   0x18000000000000L, 0xe000L, 0x0L, 0x0L
};
static final long[] jjbitVec207 = {
   0x8000000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec208 = {
   0x0L, 0x0L, 0x8080000200000000L, 0x0L
};
static final long[] jjbitVec209 = {
   0x0L, 0x4000000000000000L, 0x80L, 0x0L
};
static final long[] jjbitVec210 = {
   0x0L, 0xfc000000L, 0x200L, 0x18000000000049L
};
static final long[] jjbitVec211 = {
   0xc8003600L, 0x3c0000000000L, 0x0L, 0x100000L
};
static final long[] jjbitVec212 = {
   0x3fffL, 0x0L, 0x0L, 0x380000000000000L
};
static final long[] jjbitVec213 = {
   0x7fff000000000000L, 0x40000000L, 0x0L, 0x0L
};
static final long[] jjbitVec214 = {
   0x0L, 0x1003000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec215 = {
   0x0L, 0x0L, 0x0L, 0x10000000000000L
};
static final long[] jjbitVec216 = {
   0x0L, 0xc008000L, 0x0L, 0x0L
};
static final long[] jjbitVec217 = {
   0x7fff0L, 0x0L, 0x20L, 0x61f0000L
};
static final long[] jjbitVec218 = {
   0x0L, 0xfc00L, 0x0L, 0x800000000000000L
};
static final long[] jjbitVec219 = {
   0x0L, 0x1fe00000000L, 0x0L, 0x0L
};
static final long[] jjbitVec220 = {
   0x0L, 0x600000000000L, 0x0L, 0x380000000000L
};
static final long[] jjbitVec221 = {
   0x60000000000000L, 0x0L, 0x0L, 0x7700000L
};
static final long[] jjbitVec222 = {
   0x7bfL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec223 = {
   0x0L, 0x30L, 0x0L, 0x0L
};
static final long[] jjbitVec224 = {
   0xc0000000L, 0x0L, 0x3f7f00000000L, 0x0L
};
static final long[] jjbitVec225 = {
   0x0L, 0x1fc000000L, 0x0L, 0xf000000000000000L
};
static final long[] jjbitVec226 = {
   0xf800000000000000L, 0xc000000000000000L, 0x0L, 0x80000L
};
static final long[] jjbitVec227 = {
   0x79ff00ff00c00000L, 0x7febff8eL, 0x0L, 0x0L
};
static final long[] jjbitVec228 = {
   0x0L, 0x0L, 0x0L, 0xde00000000000000L
};
static final long[] jjbitVec229 = {
   0x0L, 0x1000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec230 = {
   0x37c00cb7fc9c3L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec231 = {
   0x200000000000000eL, 0x0L, 0x0L, 0x800000000000000L
};
static final long[] jjbitVec232 = {
   0x0L, 0x0L, 0x0L, 0xc000000000000000L
};
static final long[] jjbitVec233 = {
   0xe000L, 0x4008000000000000L, 0x0L, 0xfc000000000000L
};
static final long[] jjbitVec234 = {
   0x0L, 0xf0000000000000L, 0x0L, 0x70000000000c000L
};
static final long[] jjbitVec235 = {
   0xc00000000000L, 0x80000000L, 0x0L, 0xc0003ffeL
};
static final long[] jjbitVec236 = {
   0x0L, 0xf0000000L, 0x0L, 0xc0000000L
};
static final long[] jjbitVec237 = {
   0x0L, 0x0L, 0x0L, 0x80000000000L
};
static final long[] jjbitVec238 = {
   0x10000027f0000L, 0xd0380f71e60L, 0x0L, 0x0L
};
static final long[] jjbitVec239 = {
   0x100000018c00d4eeL, 0x3200000000L, 0x0L, 0x0L
};
static final long[] jjbitVec240 = {
   0x0L, 0x0L, 0x3c00000000L, 0x0L
};
static final long[] jjbitVec241 = {
   0x800L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec242 = {
   0x0L, 0x0L, 0x0L, 0x80c000000000000L
};
static final long[] jjbitVec243 = {
   0x0L, 0x0L, 0x0L, 0x2000000000000L
};
static final long[] jjbitVec244 = {
   0x0L, 0x0L, 0x0L, 0x200000000000000L
};
static final long[] jjbitVec245 = {
   0x0L, 0x0L, 0x0L, 0x8000000L
};
static final long[] jjbitVec246 = {
   0x0L, 0x0L, 0x3ffffff00000000L, 0x0L
};
static final long[] jjbitVec247 = {
   0x100000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec248 = {
   0x0L, 0x20000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec249 = {
   0x10L, 0x0L, 0x0L, 0x6300000000L
};
static final long[] jjbitVec250 = {
   0x40400000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec251 = {
   0x0L, 0x0L, 0x2100000000000L, 0x80000000800000L
};
static final long[] jjbitVec252 = {
   0x0L, 0x0L, 0x0L, 0x40000000000000L
};
static final long[] jjbitVec253 = {
   0x1c0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec254 = {
   0x0L, 0x1c00000000040010L, 0x1c00L, 0x0L
};
static final long[] jjbitVec255 = {
   0x1000000L, 0x81fL, 0x40490c1f0000L, 0xfff000000014c000L
};
static final long[] jjbitVec256 = {
   0x300000f00L, 0x1000000000000000L, 0xffffff8000000L, 0x3f0000000L
};
static final long[] jjbitVec257 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff00000000000002L
};
static final long[] jjbitVec258 = {
   0x0L, 0x0L, 0x0L, 0xffff003fffffd79fL
};
static final long[] jjbitVec259 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffe000007L, 0xcffffffff0ffffffL
};
static final long[] jjbitVec260 = {
   0xffff000000000000L, 0x1f9fL, 0x0L, 0x0L
};
static final long[] jjbitVec261 = {
   0x20000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec262 = {
   0x0L, 0x7400000000L, 0x0L, 0x0L
};
static final long[] jjbitVec263 = {
   0x70000800L, 0x50000000L, 0x0L, 0x1e0400000000L
};
static final long[] jjbitVec264 = {
   0x0L, 0x0L, 0x110810000000000L, 0x0L
};
static final long[] jjbitVec265 = {
   0x0L, 0x0L, 0x0L, 0xffffafe0fffc003cL
};
static final long[] jjbitVec266 = {
   0x0L, 0x20000000000000L, 0x30L, 0x0L
};
static final long[] jjbitVec267 = {
   0x0L, 0x0L, 0xa000000000000000L, 0x6000e000e000e003L
};
static final long[] jjbitVec268 = {
   0x0L, 0x0L, 0x18000000L, 0x0L
};
static final long[] jjbitVec269 = {
   0x3007fffffL, 0x0L, 0x600L, 0x0L
};
static final long[] jjbitVec270 = {
   0x0L, 0x0L, 0xfffc000000000000L, 0x3L
};
static final long[] jjbitVec271 = {
   0x4000000000000000L, 0x1L, 0x0L, 0x800000000L
};
static final long[] jjbitVec272 = {
   0x8010000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec273 = {
   0x0L, 0x0L, 0x4142c000000000L, 0x0L
};
static final long[] jjbitVec274 = {
   0x0L, 0x0L, 0x4L, 0x0L
};
static final long[] jjbitVec275 = {
   0xc000L, 0x0L, 0x0L, 0x6000020040000000L
};
static final long[] jjbitVec276 = {
   0x0L, 0x0L, 0x0L, 0x400000000000000L
};
static final long[] jjbitVec277 = {
   0x0L, 0x1000000000000L, 0x0L, 0x5f8000000000000L
};
static final long[] jjbitVec278 = {
   0x0L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec279 = {
   0x0L, 0x200000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec280 = {
   0x1500000fcf8000eL, 0x0L, 0xc000000000000000L, 0x1e0dfbfL
};
static final long[] jjbitVec281 = {
   0x0L, 0x0L, 0xc0000000L, 0x0L
};
static final long[] jjbitVec282 = {
   0x0L, 0x100000000L, 0x3ff0000L, 0x0L
};
static final long[] jjbitVec283 = {
   0x0L, 0x1L, 0x0L, 0xffffffffc0000000L
};
static final long[] jjbitVec284 = {
   0x0L, 0x1ff007fe00000000L, 0x0L, 0x0L
};
static final long[] jjbitVec285 = {
   0xc0042afc0d0037bL, 0xb400L, 0xffffbfb6f3e00000L, 0xfffffffeb3fffL
};
static final long[] jjbitVec286 = {
   0xfffff9fcfffff0ffL, 0xefffffffffffffffL, 0xfff0000007ffffffL, 0xffffc0fffffffL
};
static final long[] jjbitVec287 = {
   0x7fffffffffL, 0x7ffL, 0xfffffffff0000000L, 0x3ffffffffffL
};
static final long[] jjbitVec288 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xff7fffffffffffffL, 0xfffffffffffffdL
};
static final long[] jjbitVec289 = {
   0xffffffffffffffffL, 0xffff7fffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec290 = {
   0xfffffffffffffffeL, 0xffffffffffL, 0xfffffffffff00000L, 0x0L
};
static final long[] jjbitVec291 = {
   0xffffffffffffL, 0x3ff0060L, 0x0L, 0x0L
};
static final long[] jjbitVec292 = {
   0x0L, 0x0L, 0x0L, 0x7e000000000L
};
static final long[] jjbitVec293 = {
   0x0L, 0x0L, 0xfffffffffbffffffL, 0xfffffffffffffL
};
static final long[] jjbitVec294 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfff0000003fffffL
};
static final long[] jjbitVec295 = {
   0xc0c00001000c0010L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec296 = {
   0x0L, 0x0L, 0xffc30000L, 0xfffffffffL
};
static final long[] jjbitVec297 = {
   0xfffffc007fffffffL, 0xffffffff0001ffffL, 0x1fffffffffc00L, 0x7fffffffffffffffL
};
static final long[] jjbitVec298 = {
   0x0L, 0x0L, 0x0L, 0xffffffffffffffffL
};
static final long[] jjbitVec299 = {
   0x0L, 0x0L, 0xffffffffffff0000L, 0x7fL
};
static final long[] jjbitVec300 = {
   0x2c00f0000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec301 = {
   0x0L, 0x380000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec302 = {
   0x0L, 0x0L, 0x0L, 0x3000611000000000L
};
static final long[] jjbitVec303 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec304 = {
   0x8056440320016L, 0x0L, 0x2f00000000L, 0x1200000000000000L
};
static final long[] jjbitVec305 = {
   0x10000000000000L, 0x4000L, 0x100000000000L, 0x100000000L
};
static final long[] jjbitVec306 = {
   0x0L, 0x0L, 0xf7ffd7fe00000000L, 0xffffffffffffffffL
};
static final long[] jjbitVec307 = {
   0xffffffffffffffffL, 0x7cffffffffffffffL, 0xfffffffbffffd7f0L, 0xffffffffffffffffL
};
static final long[] jjbitVec308 = {
   0xfffe00ffffffffffL, 0xfffffffefe7fffffL, 0xfffffffffffe06ffL, 0x1f07ffffff00ffL
};
static final long[] jjbitVec309 = {
   0xffffffffcfffffc0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffdfffffffL
};
static final long[] jjbitVec310 = {
   0xffffffffffff3fffL, 0xffffffffffffe7ffL, 0x3ffffffffffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec311 = {
   0x7fff3fffffffffffL, 0x4fffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec312 = {
   0xffffffffffffffffL, 0xfeffffffffffffffL, 0xf3c5fdfffff99feeL, 0xfffffcfb080799fL
};
static final long[] jjbitVec313 = {
   0xd36dfdfffff987eeL, 0x3fffc05e023987L, 0xf3edfdfffffbbfeeL, 0x2ffcf00013bbfL
};
static final long[] jjbitVec314 = {
   0xf3edfdfffff99feeL, 0xffffcfb0c0399fL, 0xc3ffc718d63dc7ecL, 0x7ffffc000813dc7L
};
static final long[] jjbitVec315 = {
   0xe3effdfffffddfeeL, 0xff00ffcf03603ddfL, 0xf3effdfffffddfecL, 0x6ffcf40603ddfL
};
static final long[] jjbitVec316 = {
   0xe7fffffffffddfecL, 0xfe3fffcf00807ddfL, 0x2ffbfffffc7fffecL, 0x1c0000ff5f847fL
};
static final long[] jjbitVec317 = {
   0x87fffffffffffffeL, 0xfffffffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec318 = {
   0xc3ffffffffffffffL, 0xfffe1ffffffffeffL, 0xdffffffffeffffffL, 0x7ffdfffL
};
static final long[] jjbitVec319 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffffffffff003fL
};
static final long[] jjbitVec320 = {
   0xffffffffff3dffffL, 0x1fffffffe7ffffffL, 0xffffffff03ffffffL, 0x1fffffffffffffL
};
static final long[] jjbitVec321 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff07fffffeL, 0x1ffffffffffffL
};
static final long[] jjbitVec322 = {
   0x7fffff001fdfffL, 0xddfff000fffffL, 0xffcfffffffffffffL, 0x3ff03ff3fffffffL
};
static final long[] jjbitVec323 = {
   0xffffffff03ff3fffL, 0xffffffffffffffL, 0xffff07ffffffffffL, 0x3fffffffffffffL
};
static final long[] jjbitVec324 = {
   0xfff0fff1fffffffL, 0x1f3ffffffffff1L, 0xffff0fffffffffffL, 0xffffffffc7ff03ffL
};
static final long[] jjbitVec325 = {
   0xffffffffcfffffffL, 0x9fffffff7fffffffL, 0x3fff03ff03ffL, 0x0L
};
static final long[] jjbitVec326 = {
   0xffffffffffffffffL, 0x1fffffffffff0fffL, 0x3ffc7ffffffffffL, 0xf00fffffffffffffL
};
static final long[] jjbitVec327 = {
   0xf8ffffffffffffffL, 0xffffffffffffe3ffL, 0x0L, 0x7ffffffff0000L
};
static final long[] jjbitVec328 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xf000007fffffffffL
};
static final long[] jjbitVec329 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0xffdfffffffffffffL, 0x7fdcffffefcfffdfL
};
static final long[] jjbitVec330 = {
   0xf9ff00ff00ff0000L, 0x9ff300007fffff9fL, 0x3ffffff1fff1fffL, 0x1ffffffff0000L
};
static final long[] jjbitVec331 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffff03ffL, 0xffffffffffffffffL
};
static final long[] jjbitVec332 = {
   0xfffff9ffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffL
};
static final long[] jjbitVec333 = {
   0x7fffffffffL, 0xffffffff000007ffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec334 = {
   0xfffffffffffffffeL, 0xffc000ffffffffffL, 0xffffffffffffffffL, 0xffff003fffffd79fL
};
static final long[] jjbitVec335 = {
   0xffffffffffffffffL, 0x3ff1fffL, 0x0L, 0x0L
};
static final long[] jjbitVec336 = {
   0xffff7fffffffffffL, 0xffffffff7fffffffL, 0xffffffffffffffffL, 0xfe03ffffffffffffL
};
static final long[] jjbitVec337 = {
   0xffff003fffffffffL, 0x8001803fffffffffL, 0x7f7f7f7f007fffffL, 0xffffffff7f7f7f7fL
};
static final long[] jjbitVec338 = {
   0x3fc00cfffc9c3L, 0x0L, 0xfffffffffbffffffL, 0xfffffffffffffL
};
static final long[] jjbitVec339 = {
   0xffffffff100c00feL, 0xfffffffffffffffeL, 0xfffffffffe7fffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec340 = {
   0xfffe3fffffffffe0L, 0xffffffffffffffffL, 0x7ffffffffff7fffL, 0xffff000fffffffffL
};
static final long[] jjbitVec341 = {
   0xffffffff7fffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec342 = {
   0x0L, 0x0L, 0x20000000000000L, 0xffffffffffffffffL
};
static final long[] jjbitVec343 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffff1fffL, 0xffffffffffff007fL
};
static final long[] jjbitVec344 = {
   0xfffffffffffL, 0xf00fffffffffffffL, 0xffffffff00ffffffL, 0xffffffffffffffL
};
static final long[] jjbitVec345 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3ff00037fffL, 0xfc00000000000000L
};
static final long[] jjbitVec346 = {
   0x3ff0fffffffffffL, 0xffffffffffffffL, 0xffffffffffffffffL, 0xfffffff03ffc01fL
};
static final long[] jjbitVec347 = {
   0xffffffffffffffffL, 0x1fffffff800fffffL, 0xffffffffffffffffL, 0xc3ffbfffL
};
static final long[] jjbitVec348 = {
   0x7fffffffffffffL, 0xffffffff3ff3fffL, 0xffffffffffffffffL, 0xf8000007L
};
static final long[] jjbitVec349 = {
   0x7f7f007e7e7eL, 0x0L, 0x0L, 0x3ff3fffffffffffL
};
static final long[] jjbitVec350 = {
   0x5f7fffffe0f8007fL, 0xffffffffffffffdbL, 0xffffffffffffffffL, 0xfffffffffff80003L
};
static final long[] jjbitVec351 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0x3fff0000000000ffL
};
static final long[] jjbitVec352 = {
   0x1f007f027fffffL, 0xffdf0f7f81f7fe60L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec353 = {
   0xd7fffffffffffcfeL, 0xfffffff253ffffffL, 0x7fffffffffffffffL, 0x30007f7f1cfcfcfcL
};
static final long[] jjbitVec354 = {
   0x8056440320006L, 0x0L, 0x2f00000000L, 0x1200000000000000L
};
static final long[] jjbitVec355 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffcffL, 0xffffffffffffffffL
};
static final long[] jjbitVec356 = {
   0xffffffffcfffffc0L, 0xfffffc00ffffffffL, 0xffffffffffffffffL, 0xfc00ffffdfffffffL
};
static final long[] jjbitVec357 = {
   0xffffffffffff3fffL, 0xffffffffffffe7ffL, 0x3ffffffffffffL, 0x7fffffffffffc00L
};
static final long[] jjbitVec358 = {
   0x37fffffffffffff7L, 0xfeff003fffff21feL, 0x33c5fdfffff99fe2L, 0xfff000fb000601eL
};
static final long[] jjbitVec359 = {
   0x136dfdfffff987e6L, 0x3f00005e023986L, 0x33edfdfffffbbfe6L, 0x2000f000121beL
};
static final long[] jjbitVec360 = {
   0xb3edfdfffff99fe2L, 0xff000fb040201eL, 0x3ffc718d63dc7ecL, 0x7ff000000012001L
};
static final long[] jjbitVec361 = {
   0xe3effdfffffddfe0L, 0xff00000f03603dc1L, 0xb3effdfffffddfe0L, 0x6000f40003040L
};
static final long[] jjbitVec362 = {
   0x27fffffffffddfe0L, 0xfe3f000f0000601eL, 0x2ffbfffffc7fffe0L, 0x100000005c047fL
};
static final long[] jjbitVec363 = {
   0x87fffffffffffffeL, 0xc00ffffL, 0x3bffecaefef02596L, 0x30003f5fL
};
static final long[] jjbitVec364 = {
   0x3fffc00ffffffffL, 0x7ffe1ffffffffeffL, 0xdffffffffeffffffL, 0x7ffdfffL
};
static final long[] jjbitVec365 = {
   0xe6fde7ffffffffffL, 0xffffc063ff3ffc00L, 0xffffffffe0006067L, 0x1fffffffffff003fL
};
static final long[] jjbitVec366 = {
   0x7fffff001fdfffL, 0xddfff000fffffL, 0x3f8fffffffffffffL, 0x3ff00003ffffe40L
};
static final long[] jjbitVec367 = {
   0xffffffff00003fffL, 0xffffffffffffffL, 0xffff07ffffffffffL, 0x3fffffffffffffL
};
static final long[] jjbitVec368 = {
   0xe0401871fffffffL, 0x1f3fffffff0031L, 0xfffffffffffL, 0xffffffffc40000feL
};
static final long[] jjbitVec369 = {
   0xffffffffc1ffffffL, 0x9ff81fe57f5fffffL, 0x3fff00000000L, 0x0L
};
static final long[] jjbitVec370 = {
   0x17dfffffffffffefL, 0x1ffffffffc000fe4L, 0xc33dfffffffbL, 0xf003a37fffffffffL
};
static final long[] jjbitVec371 = {
   0xf8cff00fffffffffL, 0xfffffffffc00e000L, 0x0L, 0x3fffdffff0000L
};
static final long[] jjbitVec372 = {
   0xf9ff00ff00ff0000L, 0x9ff300007fffff9fL, 0x3ffffff1fff1fffL, 0x1ffe21fff0000L
};
static final long[] jjbitVec373 = {
   0xc00ffffffffL, 0xf008ffffffffffffL, 0xffffffff00ffffffL, 0xffffffffffffffL
};
static final long[] jjbitVec374 = {
   0x3ff0f67ffffffffL, 0xffffffffffffffL, 0xffffffffffffcL, 0xfffffff0000c010L
};
static final long[] jjbitVec375 = {
   0xfffffffffffffc00L, 0x1fffffff8003ffffL, 0x13cffffffffffff7L, 0xc000bffeL
};
static final long[] jjbitVec376 = {
   0x667fffffffffffL, 0x7fffffff0001fffL, 0xffffffffffffffffL, 0xf8000007L
};
static final long[] jjbitVec377 = {
   0x7f7f007e7e7eL, 0x0L, 0x0L, 0x2927ffffffffL
};
static final long[] jjbitVec378 = {
   0xd7fffffffc00fcfeL, 0xfffffff253ffffffL, 0x7fffffffffffffffL, 0x30007f7f1cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 47;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(44);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(42);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(40);
                  }
                  break;
               case 31:
                  if (curChar == 46)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(26, 29);
                  }
                  if (curChar == 46)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  break;
               case 47:
               case 26:
                  if ((0xf7ffec7200000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               case 32:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 33;
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 0:
                  if ((0xf7ffec7200000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  if ((0xf400ac7200000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(26, 29);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 46)
                     jjAddStates(3, 4);
                  if ((0xf400847200000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  else if ((0x680000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if ((0xf400847200000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if (curChar == 45)
                     jjAddStates(5, 6);
                  break;
               case 36:
                  if ((0xf7ffec7200000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(26, 29);
                  }
                  if (curChar == 62)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(26, 29);
                  }
                  if (curChar == 62)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 20:
                  if ((0x680000000000L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 21:
                  if ((0xf7ffec7200000000L & l) != 0L && kind > 54)
                     kind = 54;
                  break;
               case 22:
                  if ((0xf400847200000000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 24:
                  if ((0xf400847200000000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 25:
                  if ((0xf400ac7200000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(7, 9);
                  break;
               case 30:
                  if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               case 34:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 45)
                     jjAddStates(5, 6);
                  break;
               case 37:
                  if (curChar != 62)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(40);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(42);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(44);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(44);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(42);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(40);
                  }
                  break;
               case 47:
                  if ((0x47fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(26, 29);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 39:
                  if (curChar == 120)
                     jjCheckNAdd(46);
                  if (curChar == 120)
                     jjCheckNAdd(44);
                  if (curChar == 120)
                     jjCheckNAdd(42);
                  if (curChar == 120)
                     jjCheckNAdd(40);
                  break;
               case 0:
                  if ((0x47fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if (curChar == 92)
                     jjAddStates(10, 13);
                  if ((0x47fffffec7fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(26, 29);
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if ((0x47fffffec7fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if ((0x40000000c0000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  break;
               case 36:
                  if ((0x47fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(26, 29);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 20:
                  if (curChar == 64 && kind > 53)
                     kind = 53;
                  break;
               case 21:
                  if ((0x47fffffec7ffffffL & l) != 0L && kind > 54)
                     kind = 54;
                  break;
               case 22:
                  if ((0x40000000c0000000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 24:
                  if ((0x47fffffec7fffffeL & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 25:
                  if ((0x47fffffec7fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               case 26:
                  if ((0x47fffffec7ffffffL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               case 27:
                  if (curChar == 120)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 38:
                  if (curChar == 92)
                     jjAddStates(10, 13);
                  break;
               case 40:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if (curChar == 120)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if (curChar == 120)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if (curChar == 120)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 47:
               case 26:
                  if (!jjCanMove_19(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(26, 29);
                  }
                  break;
               case 36:
                  if (!jjCanMove_19(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 35)
                     kind = 35;
                  break;
               case 3:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 36)
                     kind = 36;
                  break;
               case 4:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 37)
                     kind = 37;
                  break;
               case 5:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 38)
                     kind = 38;
                  break;
               case 6:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 39)
                     kind = 39;
                  break;
               case 7:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 40)
                     kind = 40;
                  break;
               case 8:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               case 9:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 42)
                     kind = 42;
                  break;
               case 10:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 43)
                     kind = 43;
                  break;
               case 11:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 44)
                     kind = 44;
                  break;
               case 12:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 45)
                     kind = 45;
                  break;
               case 13:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2) && kind > 46)
                     kind = 46;
                  break;
               case 14:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 47)
                     kind = 47;
                  break;
               case 15:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2) && kind > 48)
                     kind = 48;
                  break;
               case 16:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2) && kind > 49)
                     kind = 49;
                  break;
               case 17:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 18:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2) && kind > 51)
                     kind = 51;
                  break;
               case 21:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2) && kind > 54)
                     kind = 54;
                  break;
               case 23:
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2) && kind > 57)
                     kind = 57;
                  break;
               case 24:
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2) && kind > 58)
                     kind = 58;
                  break;
               case 25:
                  if (!jjCanMove_20(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(26, 29);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 47 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   46, 26, 29, 32, 34, 36, 37, 26, 29, 28, 39, 41, 43, 45, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec19[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            if ((jjbitVec5[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec2[i1] & l1) != 0L)
            if ((jjbitVec3[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec0[i1] & l1) != 0L)
            if ((jjbitVec1[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 9:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec35[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 4:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec38[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec52[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec68[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 1:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec70[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 2:
         return ((jjbitVec71[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec72[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec73[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec74[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec75[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec76[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec77[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec78[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec79[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec80[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec81[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec82[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec83[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec84[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec85[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec86[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec87[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec88[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec89[i2] & l2) != 0L);
      case 160:
         return ((jjbitVec90[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec91[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec92[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec93[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec94[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec95[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec96[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 1:
         return ((jjbitVec101[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec102[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec103[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec104[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec105[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec106[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec107[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec108[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec109[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec110[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec111[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec112[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec113[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec114[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec115[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec116[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec117[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec118[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec119[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec120[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec121[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec122[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec123[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec124[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec125[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec126[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec127[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec128[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec129[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec130[i2] & l2) != 0L);
      case 160:
         return ((jjbitVec131[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec132[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec133[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec134[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec135[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec136[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec137[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec138[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec139[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec140[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec141[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec142[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec143[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec144[i2] & l2) != 0L);
      default :
         if ((jjbitVec99[i1] & l1) != 0L)
            if ((jjbitVec100[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec97[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec145[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec146[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec147[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec148[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec149[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec150[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec151[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec152[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec153[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec154[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec155[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec156[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec157[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec158[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec159[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec160[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec161[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec162[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec163[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec164[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec165[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec166[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec167[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec168[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec169[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec170[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec171[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec172[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec173[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec174[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec175[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec176[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec177[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 22:
         return ((jjbitVec178[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec179[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec180[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec181[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec182[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec183[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec184[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec185[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec186[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec187[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec188[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec189[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec190[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec191[i2] & l2) != 0L);
      case 36:
         return ((jjbitVec192[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec193[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec194[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec195[i2] & l2) != 0L);
      case 50:
         return ((jjbitVec196[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec197[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 5:
         return ((jjbitVec198[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec100[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec199[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec200[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec201[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec202[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec203[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec204[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec205[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec206[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec207[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec208[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec209[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec210[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec211[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec212[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec213[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec214[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec215[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec216[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec217[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec218[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec219[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec220[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec221[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec222[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec223[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec224[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec225[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec226[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec227[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec228[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec229[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec230[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec231[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec232[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec233[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec234[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec235[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec236[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec237[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec238[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec239[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec240[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec241[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec242[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec243[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec244[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec207[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec245[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec246[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec247[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec79[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec248[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec249[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec251[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec252[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec253[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec254[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec255[i2] & l2) != 0L);
      case 35:
         return ((jjbitVec256[i2] & l2) != 0L);
      case 37:
         return ((jjbitVec257[i2] & l2) != 0L);
      case 38:
         return ((jjbitVec87[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec258[i2] & l2) != 0L);
      case 41:
         return ((jjbitVec259[i2] & l2) != 0L);
      case 43:
         return ((jjbitVec260[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec261[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec262[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec263[i2] & l2) != 0L);
      default :
         if ((jjbitVec250[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec264[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec265[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec266[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec267[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec268[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec269[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec270[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec271[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_17(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec273[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec274[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec275[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec252[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec276[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec277[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec278[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec279[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec280[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec281[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec282[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec283[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec284[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec285[i2] & l2) != 0L);
      case 35:
         return ((jjbitVec286[i2] & l2) != 0L);
      case 36:
         return ((jjbitVec287[i2] & l2) != 0L);
      case 37:
         return ((jjbitVec288[i2] & l2) != 0L);
      case 38:
         return ((jjbitVec289[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec290[i2] & l2) != 0L);
      case 43:
         return ((jjbitVec291[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec292[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec293[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec294[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec295[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec296[i2] & l2) != 0L);
      case 50:
         return ((jjbitVec297[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec298[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec299[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec300[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec301[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec194[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec302[i2] & l2) != 0L);
      default :
         if ((jjbitVec272[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_18(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 224:
         return ((jjbitVec100[i2] & l2) != 0L);
      case 248:
         return ((jjbitVec303[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_19(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec306[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec307[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec308[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec309[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec310[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec311[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec312[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec313[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec314[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec315[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec316[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec317[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec318[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec319[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec115[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec320[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec321[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec322[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec323[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec324[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec325[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec326[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec327[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec328[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec329[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec330[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec331[i2] & l2) != 0L);
      case 35:
         return ((jjbitVec332[i2] & l2) != 0L);
      case 36:
         return ((jjbitVec333[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec334[i2] & l2) != 0L);
      case 41:
         return ((jjbitVec259[i2] & l2) != 0L);
      case 43:
         return ((jjbitVec335[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec336[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec337[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec338[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec294[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec339[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec340[i2] & l2) != 0L);
      case 50:
         return ((jjbitVec341[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec342[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec130[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec343[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec344[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec345[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec346[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec347[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec348[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec349[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec139[i2] & l2) != 0L);
      case 248:
         return ((jjbitVec303[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec140[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec350[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec351[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec352[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec353[i2] & l2) != 0L);
      default :
         if ((jjbitVec305[i1] & l1) != 0L)
            if ((jjbitVec100[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec304[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_20(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec306[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec307[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec355[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec308[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec356[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec357[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec311[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec358[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec359[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec360[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec361[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec362[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec363[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec364[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec365[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec115[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec320[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec321[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec366[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec367[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec368[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec369[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec370[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec371[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec328[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec329[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec372[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec331[i2] & l2) != 0L);
      case 35:
         return ((jjbitVec332[i2] & l2) != 0L);
      case 36:
         return ((jjbitVec333[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec334[i2] & l2) != 0L);
      case 41:
         return ((jjbitVec259[i2] & l2) != 0L);
      case 43:
         return ((jjbitVec335[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec336[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec337[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec338[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec294[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec339[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec340[i2] & l2) != 0L);
      case 50:
         return ((jjbitVec341[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec342[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec130[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec343[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec373[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec345[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec374[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec375[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec376[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec377[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec139[i2] & l2) != 0L);
      case 248:
         return ((jjbitVec303[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec140[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec350[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec351[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec352[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec378[i2] & l2) != 0L);
      default :
         if ((jjbitVec305[i1] & l1) != 0L)
            if ((jjbitVec100[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec354[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\151\156\164", "\163\164\162\151\156\147", 
"\143\150\141\162\141\143\164\145\162", "\142\157\157\154\145\141\156", "\52", "\72", "\101\104\124\72", 
"\123\151\147\156\141\164\165\162\145\163\72", "\105\161\165\141\164\151\157\156\163\72", "\53", "\55", "\56\56\56", 
"\55\76", "\56", "\100", "\41", "\44", "\45", "\46", "\57", "\74", "\75", "\76", "\77", 
"\136", "\137", "\176", "\134\170", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[47];
private final int[] jjstateSet = new int[94];
protected char curChar;
/** Constructor. */
public InputParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public InputParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 47; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
