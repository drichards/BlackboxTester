/* Generated By:JJTree&JavaCC: Do not edit this line. InputParserTokenManager.java */
package parser.generated;

/** Token Manager. */
public class InputParserTokenManager implements InputParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100000000L) != 0L)
            return 24;
         if ((active0 & 0x39e0L) != 0L)
         {
            jjmatchedKind = 39;
            return 32;
         }
         if ((active0 & 0x50000L) != 0L)
            return 17;
         if ((active0 & 0x28000L) != 0L)
            return 21;
         if ((active0 & 0xfff04600L) != 0L)
            return 32;
         return -1;
      case 1:
         if ((active0 & 0x100000000L) != 0L)
            return 33;
         if ((active0 & 0x39e0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 32;
         }
         if ((active0 & 0x10000L) != 0L)
            return 16;
         if ((active0 & 0x20000L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0x39e0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 32;
         }
         if ((active0 & 0x10000L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active0 & 0x31e0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x800L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & 0x31e0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
            return 32;
         }
         return -1;
      case 5:
         if ((active0 & 0x31a0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x40L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active0 & 0x3080L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active0 & 0x120L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x3080L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 32;
         }
         return -1;
      case 8:
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 32;
         }
         if ((active0 & 0x80L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
            return 32;
         }
         if ((active0 & 0x2000L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 20, 32);
      case 36:
         return jjStartNfaWithStates_0(0, 21, 32);
      case 37:
         return jjStartNfaWithStates_0(0, 22, 32);
      case 38:
         return jjStartNfaWithStates_0(0, 23, 32);
      case 42:
         return jjStartNfaWithStates_0(0, 9, 32);
      case 43:
         return jjStartNfaWithStates_0(0, 14, 32);
      case 45:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 46:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 47:
         return jjStartNfaWithStates_0(0, 24, 32);
      case 58:
         return jjStartNfaWithStates_0(0, 10, 32);
      case 60:
         return jjStartNfaWithStates_0(0, 25, 32);
      case 61:
         return jjStartNfaWithStates_0(0, 26, 32);
      case 62:
         return jjStartNfaWithStates_0(0, 27, 32);
      case 63:
         return jjStartNfaWithStates_0(0, 28, 32);
      case 64:
         return jjStopAtPos(0, 19);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 94:
         return jjStartNfaWithStates_0(0, 29, 32);
      case 95:
         return jjStartNfaWithStates_0(0, 30, 32);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 126:
         return jjStartNfaWithStates_0(0, 31, 32);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 32);
         break;
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 120:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 32);
         break;
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 32);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1080L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 103:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 32);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 114:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 32);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 7, 32);
         break;
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 32);
         break;
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 12, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x1e00L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec2 = {
   0x8000L, 0x0L, 0x4000000000L, 0x0L
};
static final long[] jjbitVec3 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x1000000L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec5 = {
   0x3ff0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x0L, 0x3ffL
};
static final long[] jjbitVec8 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec10 = {
   0x0L, 0x3ffL, 0x3ff0000L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x0L, 0x3ff00000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0xffc0L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x3ff03ffL, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ff0000L, 0x3ff000000000000L, 0x0L
};
static final long[] jjbitVec15 = {
   0x0L, 0x3ff03ffL, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec17 = {
   0x3ffL, 0x0L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec18 = {
   0x0L, 0x3ff0000L, 0x0L, 0x0L
};
static final long[] jjbitVec19 = {
   0x0L, 0x0L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec20 = {
   0xc800000000000008L, 0xde01L, 0xc00000000000000cL, 0x801981L
};
static final long[] jjbitVec21 = {
   0xc000000000000008L, 0x1L, 0xc000000000000008L, 0x1a01L
};
static final long[] jjbitVec22 = {
   0x400000000000000cL, 0x801981L, 0xc000000000000000L, 0x801dc6L
};
static final long[] jjbitVec23 = {
   0xeL, 0x1eL, 0x400000000000000cL, 0x600d9fL
};
static final long[] jjbitVec24 = {
   0xc00000000000000cL, 0x801dc1L, 0xcL, 0xc0000ff038000L
};
static final long[] jjbitVec25 = {
   0xc000000000000000L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0x1902180000000000L, 0x3f9c00c00000L, 0x1c009f98L, 0x0L
};
static final long[] jjbitVec27 = {
   0x0L, 0x0L, 0xc040000000000000L, 0x1bfL
};
static final long[] jjbitVec28 = {
   0x1fb0e7800000000L, 0x0L, 0xffff000000000000L, 0x301L
};
static final long[] jjbitVec29 = {
   0xe000000L, 0x7e01a00a00000L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0xe820000000000010L, 0x1bL, 0x4c200000004L, 0xc5c8000000000L
};
static final long[] jjbitVec31 = {
   0x300ff000000000L, 0x0L, 0x0L, 0x4000200000000L
};
static final long[] jjbitVec32 = {
   0x9800000000L, 0x0L, 0xfff0000000000003L, 0xfL
};
static final long[] jjbitVec33 = {
   0x0L, 0xc0000L, 0xec30000000000008L, 0x1L
};
static final long[] jjbitVec34 = {
   0x19800000000000L, 0x800000000002000L, 0x0L, 0x0L
};
static final long[] jjbitVec35 = {
   0x0L, 0x0L, 0x0L, 0x16d800000000L
};
static final long[] jjbitVec36 = {
   0x0L, 0x0L, 0x300L, 0x0L
};
static final long[] jjbitVec37 = {
   0x0L, 0x0L, 0x0L, 0x1de0000000L
};
static final long[] jjbitVec38 = {
   0x0L, 0x7000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x0L, 0x0L, 0x0L, 0x7f7fffffL
};
static final long[] jjbitVec40 = {
   0xaa55555555555555L, 0x2b555555555554aaL, 0x11aed2d5b1dbced6L, 0x55d255554aaaa490L
};
static final long[] jjbitVec41 = {
   0x6c05555555555555L, 0x557aL, 0x0L, 0x0L
};
static final long[] jjbitVec42 = {
   0x0L, 0x45000000000000L, 0xffbfffed740L, 0xe6905555551c8000L
};
static final long[] jjbitVec43 = {
   0xffffffffffffL, 0x5555555500000000L, 0x5555555555555401L, 0x5555555555552aabL
};
static final long[] jjbitVec44 = {
   0xfffe005555555555L, 0x7fffffL, 0x0L, 0x0L
};
static final long[] jjbitVec45 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x3fL
};
static final long[] jjbitVec46 = {
   0x5555555555555555L, 0x5555555555555555L, 0x5555555540155555L, 0x5555555555555555L
};
static final long[] jjbitVec47 = {
   0xff00ff003f00ff00L, 0xff00aa003f00L, 0xf00000000000000L, 0xf001f000f000f00L
};
static final long[] jjbitVec48 = {
   0xc00f3d503e273884L, 0x20L, 0x8L, 0x0L
};
static final long[] jjbitVec49 = {
   0x7fffffffffffL, 0xc025ea9d00000000L, 0x5555555555555555L, 0x280555555555L
};
static final long[] jjbitVec50 = {
   0x0L, 0x155555555555L, 0x555555L, 0x0L
};
static final long[] jjbitVec51 = {
   0x5554555400000000L, 0x6a00555555555555L, 0x15500012855L, 0x0L
};
static final long[] jjbitVec52 = {
   0x7fffffe00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec53 = {
   0xffffffffffffL, 0x5555555500000000L, 0x5555555555555701L, 0x5555555555552aabL
};
static final long[] jjbitVec54 = {
   0xc800000000000008L, 0xffc00000de01L, 0xc00000000000000cL, 0xffc000801981L
};
static final long[] jjbitVec55 = {
   0xc000000000000008L, 0xffc000000001L, 0xc000000000000008L, 0xffc000001a01L
};
static final long[] jjbitVec56 = {
   0x400000000000000cL, 0xffc000801981L, 0xc000000000000000L, 0xffc000801dc6L
};
static final long[] jjbitVec57 = {
   0xeL, 0xffc00000001eL, 0x400000000000000cL, 0xffc000600d9fL
};
static final long[] jjbitVec58 = {
   0xc00000000000000cL, 0xffc000801dc1L, 0xcL, 0xc0000ff038000L
};
static final long[] jjbitVec59 = {
   0xc00003ff00000000L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec60 = {
   0x1902180000000000L, 0x3f9c00c003ffL, 0xffffffff1fff9f98L, 0x3fL
};
static final long[] jjbitVec61 = {
   0x0L, 0x0L, 0xc040000000000000L, 0x3ff000001bfL
};
static final long[] jjbitVec62 = {
   0x1fb0e7800000000L, 0xffc0L, 0xffff000000000000L, 0x3ff0301L
};
static final long[] jjbitVec63 = {
   0xe000000L, 0x7e01a00a00000L, 0x3ff03ffL, 0x0L
};
static final long[] jjbitVec64 = {
   0xe820000000000010L, 0x3ff001bL, 0x3ff04c200000004L, 0xc5c8000000000L
};
static final long[] jjbitVec65 = {
   0x300ff000000000L, 0x3ff03ffL, 0x0L, 0x4000200000000L
};
static final long[] jjbitVec66 = {
   0x3ff00000000L, 0x7155555555555L, 0x555555L, 0x0L
};
static final long[] jjbitVec67 = {
   0x9800000000L, 0x0L, 0xfff0000000000003L, 0x3ff000fL
};
static final long[] jjbitVec68 = {
   0x3ffL, 0xc0000L, 0xec30000000000008L, 0x3ff0001L
};
static final long[] jjbitVec69 = {
   0x19800000000000L, 0x800000003ff2000L, 0x0L, 0x0L
};
static final long[] jjbitVec70 = {
   0x0L, 0x0L, 0x0L, 0x3ff16d800000000L
};
static final long[] jjbitVec71 = {
   0x7fffffe03ff0000L, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(29);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(27);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(25);
                  }
                  break;
               case 17:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 18;
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 0:
                  if ((0xf7ffec7200000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  if ((0xf400ac7200000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(11, 14);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 46)
                     jjAddStates(3, 4);
                  if ((0xf400847200000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if ((0x680000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  if ((0xf400847200000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  if (curChar == 45)
                     jjAddStates(5, 6);
                  break;
               case 16:
                  if (curChar == 46)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(11, 14);
                  }
                  if (curChar == 46)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 32:
               case 11:
                  if ((0xf7ffec7200000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               case 21:
                  if ((0xf7ffec7200000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(11, 14);
                  }
                  if (curChar == 62)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(11, 14);
                  }
                  if (curChar == 62)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 5:
                  if ((0x680000000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 6:
                  if ((0xf7ffec7200000000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 7:
                  if ((0xf400847200000000L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 9:
                  if ((0xf400847200000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 10:
                  if ((0xf400ac7200000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(7, 9);
                  break;
               case 15:
                  if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 18:
                  if (curChar != 46)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               case 19:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 45)
                     jjAddStates(5, 6);
                  break;
               case 22:
                  if (curChar != 62)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(25);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(27);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(29);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(29);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(27);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(25);
                  }
                  break;
               case 0:
                  if ((0x47fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  else if (curChar == 92)
                     jjAddStates(10, 13);
                  if ((0x47fffffec7fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(11, 14);
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  if ((0x47fffffec7fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if ((0x40000000c0000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  break;
               case 24:
                  if (curChar == 120)
                     jjCheckNAdd(31);
                  if (curChar == 120)
                     jjCheckNAdd(29);
                  if (curChar == 120)
                     jjCheckNAdd(27);
                  if (curChar == 120)
                     jjCheckNAdd(25);
                  break;
               case 32:
                  if ((0x47fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(11, 14);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 21:
                  if ((0x47fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(11, 14);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 5:
                  if (curChar == 64 && kind > 38)
                     kind = 38;
                  break;
               case 6:
                  if ((0x47fffffec7ffffffL & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 7:
                  if ((0x40000000c0000000L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 9:
                  if ((0x47fffffec7fffffeL & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 10:
                  if ((0x47fffffec7fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               case 11:
                  if ((0x47fffffec7ffffffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               case 12:
                  if (curChar == 120)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(7, 9);
                  break;
               case 14:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(10, 13);
                  break;
               case 25:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 120)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar == 120)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 120)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(11, 14);
                  }
                  break;
               case 32:
               case 11:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               case 21:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 35)
                     kind = 35;
                  break;
               case 3:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 36)
                     kind = 36;
                  break;
               case 6:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 39)
                     kind = 39;
                  break;
               case 8:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 42)
                     kind = 42;
                  break;
               case 9:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 43)
                     kind = 43;
                  break;
               case 10:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(11, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   31, 11, 14, 17, 19, 21, 22, 11, 14, 13, 24, 26, 28, 30, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec19[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            if ((jjbitVec5[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec2[i1] & l1) != 0L)
            if ((jjbitVec3[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec0[i1] & l1) != 0L)
            if ((jjbitVec1[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 9:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec35[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 4:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec38[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec52[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec68[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec70[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec71[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\151\156\164\145\147\145\162", 
"\163\164\162\151\156\147", "\143\150\141\162\141\143\164\145\162", "\142\157\157\154\145\141\156", "\52", 
"\72", "\101\104\124\72", "\123\151\147\156\141\164\165\162\145\163\72", 
"\105\161\165\141\164\151\157\156\163\72", "\53", "\55", "\56\56\56", "\55\76", "\56", "\100", "\41", "\44", "\45", 
"\46", "\57", "\74", "\75", "\76", "\77", "\136", "\137", "\176", "\134\170", null, 
null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[32];
private final int[] jjstateSet = new int[64];
protected char curChar;
/** Constructor. */
public InputParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public InputParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
